<!DOCTYPE html>

<html lang="en" class="fluigiPage">
<head>
    <title> {{title}} </title>
    <link rel="stylesheet" href="http://cdn.webix.com/edge/webix.css" type="text/css">
    <script src="http://cdn.webix.com/edge/webix.js" type="text/javascript"></script>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="../stylesheets/main.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
    <script src="../javascripts/settings.js" > </script>
    <script type="text/javascript" src="../javascripts/valvecontrol.js"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.10.12/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="//cdn.datatables.net/1.10.12/js/jquery.dataTables.js"></script>
    <script type="text/javascript" src="../javascripts/initiate_data.js"></script>
    <script src="https://code.jquery.com/jquery-2.2.4.js" integrity="sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=" crossorigin="anonymous"></script>
    <script src="../public/javascripts/serialcommunication.js"></script>
    <!--Template for valves to be placed over graph canvas-->
    <template id="valve-template" >
        <div class ="valve">
            <a class="valve_marker" href="" >
                <img class="valve_color" src="../images/fluigi/valveMarkerOpen.svg" width="18.5" height="43">
            </a>
        </div>
    </template>
    <link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css"/>
    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

</head>

<body>


<!--Fluigi Navigation Bar-->
<nav class="navbar navbar-fixed-top">
    <div class="container-fluid">

        <div class="navbar-header">
            <a class="navbar-brand" >
                <img alt="Brand" src="../images/fluigi/fluigiLogoFluigi.png">
            </a>
        </div>


        <div>
            <ul class="nav navbar-nav">
                <li class="nav-item"><a class="nav-link" href="../"> <img src="../images/fluigi/homeButtonTransparent.png"> </a>
                </li>
                <li class="nav-item"> <a class="nav-link"> <img onclick="settingsButtonPressed();" src="../images/fluigi/settingsIcon.png"> </a>
                </li>
                <!--<li class="nav-item"> <a class="nav-link" href="../serialcommunication"> <img height= "60" src="../images/fluigi/connectedIcon.png"></a></li>-->
                <li class="nav-item"><img height= "100" class="myBtn" data-toggle="modal" data-target="#connectModal" src="../images/fluigi/connectedIcon.png">
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Modal -->
<div id="connectModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Connect to an arduino! </h4>
            </div>
            <div class="modal-body">
                <script src="https://code.jquery.com/jquery-2.2.4.js" integrity="sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=" crossorigin="anonymous"></script>
                <script src="../javascripts/serialcommunication.js"></script>
                <style>
                    ul#ui li {
                        display: inline;
                    }
                    ul#ui li#port-list {
                        display: block;
                    }
                </style>
                <body style="background-image:url(../images/index/background_img.png); background-color: #34495e">


                <ul id="ui" style="margin-bottom:10px">
                    <li>
                        <button id="begin-comm"> Open Comm</button>
                    </li>
                    <li>
                        <button id="end-comm"> Close Comm</button>
                    </li>
                    <li>
                        <button id="on-cmd">Send On Command</button>
                    </li>
                    <li>
                        <button id="off-cmd">Send Off Command</button>
                    </li>


                    <li id="port-list">
                        <br/>
                        <label for="ports" style="color:black">Serial Ports Available</label>
                        <select id="ports">
                            {{#each serialPorts}} <!-- // Note the reference to the customers object​-->

                                <option value={{this.comName}}> name: {{ this.comName }} </option>​

                            {{/each}}

                        </select>
                    </li>
                </ul>
                </body>
                <!--Click on the Mushroom to get started! Import your verilog and ucf file to display the mint file and the code. Then, save your files and proceed back to the home page.-->
                <!--<br/><br/>-->
                <!--The next step would be Fluigi. Import your svg and json files to display the microfluidics.-->
                <!--The buttons on the svg display will help you turn on and off the valves, and the settings button leads you to a table where you can set the open and closed states.-->
                <!--The connectivity button allows you to connect to your arduino.-->
                <!--<br/><br/>-->
                <!--Email us here for further questions:-->
                <!--<a href="mailto:bu.igemhw2016@gmail.com" style="font-size:12px; color:blue; font-weight:400;">The FluigiGUI Team</a>-->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>


<!--Draw Canvas (resize to page width/height in js)-->
<div id="container">
    <canvas id="canvasID" ></canvas>
    <!--JS to draw SVG in canvas-->
    <script src="../javascripts/fluigiGraph.js" type="application/javascript"></script>
    <!--This is where valves go!-->
    <div id="content"></div>
</div>


<!--Upload Bar-->
<div id= "upload_bar" class="uploadbar" align="center">
    <div id="div1">
        <form id="uploadForm"
              enctype="multipart/form-data"
              action="/api/photo"
              method="post">
            <input id= "inputfile" class="inputButton" type="file" name="myjson" />
            <br/>
            <input id="uploadfile" class= "inputButton" type="submit" value="Upload JSON" name="submit">
            <span id = "status"></span>
            <br/>
        </form>
    </div>

    <div id="div2">
            <form id="uploadForm2"
                  enctype="multipart/form-data"
                  action="/api/svg"
                  method="post">
                <input id= "inputfile2" onmouseover="('Input a JSON File')" class="inputButton" type="file" name="mysvg" />
                <br/>
                <input id="uploadfile2" class= "inputButton" type="submit" value="Upload SVG" name="submit">
                <span id = "status2"></span>
            </form>
        </div>
</div>


<form class="actuators">
    Valve to Actuate:<br>
    <input id="ValveNumberSelector" type="text" name="firstname" ><br>
    State to Apply:<br>
    <input id="ValveStateAssigner" type="text" name="lastname" ><br><br>
    <input type="submit" value="Send to Arduino" onclick="mediateValveState()">
</form>

<!-- LEAVE JS FOR LAST - faster loading time -->
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>

</body>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery.form/3.51/jquery.form.min.js"></script>

<!--<script src="../javascripts/uploadBar.js" type="application/javascript"></script>-->

<script>

    //Upload AJAX Forms

    $(document).ready(function () {

        $('#uploadForm').submit(function () {
            $("#status").empty().text("File is uploading...");

            $(this).ajaxSubmit({

                error: function (xhr) {
                    status('Error: ' + xhr.status);
                },
                success: function (response) {
                    console.log(response);
                    $("#status").empty().text(response);


                    // Json successfully uploaded
                    var fileOfChoice = "../uploads/myjson.json";
                    $.getJSON(fileOfChoice, function (json) {
                        //alert('awesome possum');


                        // Use Json as a string
                        jsonString = JSON.stringify(json);
                        var controlOnly;

                        // figure out indices of flow and control and cut json_string to substring to only contain control
                        flowIndex = jsonString.search('flow');
                        controlIndex = jsonString.search('control');
                        if(flowIndex < controlIndex){   // control is after flow
                            controlOnly = jsonString.substr(controlIndex);
                        }
                        else {  // control is before flow
                            controlOnly = jsonString.substr(controlIndex, (flowIndex-controlIndex));
                        }

                        // Now look for all Port in the control layer only
                        var Re = /Port.+?\[(.+?),(.+?)\].+?"radius1":(.+?),"radius2":(.+?),/g;
                        var myArray;
                        var portArray = [];
                        var portX = [];
                        var portY = [];
                        var portRadius1 = [];
                        var portRadius2 = [];


                        while ((myArray = Re.exec(controlOnly)) !== null) {
                            //console.log(myArray);
                            portX.push(myArray[1]);
                            portY.push(myArray[2]);
                            portRadius1.push(myArray[3]);
                            portRadius2.push(myArray[4]);
                            portArray.push(myArray.index);
                        }
                        console.log("Port string index: " + portArray);
                        console.log("Port X coordinates: " + portX);
                        console.log("Port Y coordinates: " + portY);
                        console.log("Port Radius1: " + portRadius1);
                        console.log("Port Radius2: " + portRadius2);

                        // Store json variables to localStorage
                        localStorage.portX = portX;
                        localStorage.portY = portY;
                        localStorage.portRadius1 = portRadius1;
                        localStorage.portRadius2 = portRadius2;





                        // method using Json as JSON OBJECT
                        //    for( var i=0; i < (Object.keys(json.layers)).length; i++) { // there will be 2 -> flow and control
                        //        //console.log(json.layers[i].name);
                        //        //console.log(Object.keys(json.layers[i].params));
                        //        if(json.layers[i].name == 'flow') {
                        //            console.log(Object.keys(json.layers[0].features));
                        //            //console.log(json.layers[i].name);
                        //        }
                        //    }


                    });

                }
            });

            return false;
        });
        $('#uploadForm2').submit(function () {
            $("#status2").empty().text("File is uploading...");

            $(this).ajaxSubmit({

                error: function (xhr) {
                    status('Error: ' + xhr.status);
                },
                success: function (response) {
                    console.log(response);
                    $("#status2").empty().text(response);

                }
            });
            return false;
        });
    });

</script>




</html>

